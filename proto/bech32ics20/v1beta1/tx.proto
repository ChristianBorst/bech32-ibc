syntax = "proto3";
package osmosis.bech32ics20.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/bank/v1beta1/bank.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/osmosis-labs/osmosis/x/bech32ics20/types";

// Msg defines the bank Msg service.
service Msg {
  // Send defines a method for sending coins from one account to another
  // account.
  rpc Send(MsgSend) returns (MsgSendResponse);

  // MultiSend defines a method for sending coins from some accounts to other
  // accounts.
  rpc MultiSend(MsgMultiSend) returns (MsgMultiSendResponse);
}

// MsgSend represents a message to send coins from one account to another.
message MsgSend {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string from_address = 1 [ (gogoproto.moretags) = "yaml:\"from_address\"" ];
  string to_address = 2 [ (gogoproto.moretags) = "yaml:\"to_address\"" ];
  repeated cosmos.base.v1beta1.Coin amount = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  uint64 to_height_offset = 4;
  google.protobuf.Duration to_time_offset = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag) = "to_time_offset,omitempty",
    (gogoproto.moretags) = "yaml:\"to_time_offset\""
  ];
}

// MsgSendResponse defines the Msg/Send response type.
message MsgSendResponse {}

// MsgMultiSend represents an arbitrary multi-in, multi-out send message.
message MsgMultiSend {
  option (gogoproto.equal) = false;

  repeated cosmos.bank.v1beta1.Input inputs = 1 [ (gogoproto.nullable) = false ];
  repeated cosmos.bank.v1beta1.Output outputs = 2
      [ (gogoproto.nullable) = false ];
}

// MsgMultiSendResponse defines the Msg/MultiSend response type.
message MsgMultiSendResponse {}
